#include "TestCommon.h"

#include <algorithm>
#include <cmath>
#include <numeric>
#include <vector>

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include <hwy/highway.h>

#include <CommonUtils.h>
#include <Cos.h>
#include <Sin.h>

namespace trigon::test {

enum class TestFuncKind { Sin, Cos, ArcCos };

template <typename T>
struct TestInterval {
    T min;
    T max;
};

template <typename T, TestFuncKind TestFunc>
struct TestData;

// clang-format off
template <typename T>
    requires std::is_floating_point_v<T>
struct TestData<T, TestFuncKind::Sin> {
    static constexpr TestInterval<T> interval{-PI<T>, PI<T>};
    static constexpr std::array<T, 256> data= {
    0, -0.024637449195381972702, -0.049259941092816851969,-0.073852527474873960817, -0.098400278279642709565, 
    -0.12288829066471412227, -0.14730169805463751138, -0.17162567916635962551, -0.19584546700716696187, 
    -0.21994635783966862823, -0.24391372010837714866, -0.26773300332246792135, -0.29138974688932464021, 
    -0.31486958889350786984, -0.33815827481581709674, -0.36124166618715294874, -0.38410574917192585710, 
    -0.40673664307580020775, -0.42912060877260896402, -0.45124405704532281416, -0.47309355683601007442, 
    -0.49465584339977882953, -0.51591782635775108467, -0.53686659764418000010, -0.55748943934288554512, 
    -0.57777383140825110211, -0.59770745926609363431, -0.61727822128979295904, -0.63647423614714139791, 
    -0.65528385001345356058, -0.67369564364655721171, -0.69169843931937002219, -0.70928130760585346452, 
    -0.72643357401622412687, -0.74314482547739423501, -0.75940491665470713248, -0.77520397611112981828, 
    -0.79053241230016332073, -0.80538091938883263535, -0.81974048290722111245, -0.83360238522111948462, 
    -0.84695821082446711044, -0.85979985144837241434, -0.87211951098361085643, -0.88390971021361200329, 
    -0.89516329135506232207, -0.90587342240336711573, -0.91603360128033348687, -0.92563765978155628805, 
    -0.93467976732111061635, -0.94315443447127746406, -0.95105651629515357212, -0.95838121547012227205, 
    -0.96512408520028906958, -0.97128103191611384173, -0.97684831775960071162, -0.98182256285353685167, 
    -0.98620074735340256962, -0.98998021328070697071, -0.99315866613663618521, -0.99573417629503452187, 
    -0.99770518017387287395, -0.99907048118449318394, -0.99982925045805268448, -0.99998102734872689402, 
    -0.99952571971336587467, -0.99846360396743397398, -0.99679532491719909006, -0.99452189536827333692, 
    -0.99164469551074276384, -0.98816547208125941376, -0.98408633730260441148, -0.97940976760136586865, 
    -0.97413860210451009823, -0.96827604091575886411, -0.96182564317281907041, -0.95479132488664433865, 
    -0.94717735656404024854, -0.93898836061505654935, -0.93022930854674030375, -0.92090551794495362560, 
    -0.91102264924608833799, -0.90058670230063743104, -0.88960401273070956148, -0.87808124808369793257, 
    -0.86602540378443864676, -0.85344379888831595987, -0.84034407163789270951, -0.82673417482576347022, 
    -0.81262237096644562842, -0.79801722728023950333, -0.78292761049210279238, -0.76736268144869692384, 
    -0.75133188955687328666, -0.73484496704697571042, -0.71791192306444192175, -0.70054303759329094276, 
    -0.68274885521518545802, -0.66454017870785799881, -0.64592806248678731474, -0.62692380589410646502, 
    -0.60753894633881690674, -0.58778525229247312917, -0.56767471614459012604, -0.54721954692211115982, 
    -0.52643216287735580024, -0.50532518394894806449, -0.48391142410030159981, -0.46220388354031318383, 
    -0.44021574083098732882, -0.41796034488678341976, -0.39545120687054255090, -0.37270199199091401167, 
    -0.34972651120626117171, -0.32653871284008329109, -0.30315267411304349991, -0.27958259259674381955, 
    -0.25584277759443560506, -0.23194764145389814518, -0.20791169081775933710, -0.18374951781657033157, 
    -0.15947579120998079808, -0.13510524748139296732, -0.11065268189150085152, -0.086132939496146003281, 
    -0.061560906133942837451, -0.036951499389144892850, -0.012319659535238442085, 0.012319659535238442085, 
    0.036951499389144892850, 0.061560906133942837451, 0.086132939496146003281, 0.11065268189150085152, 
    0.13510524748139296732, 0.15947579120998079808, 0.18374951781657033157, 0.20791169081775933710, 
    0.23194764145389814518, 0.25584277759443560506, 0.27958259259674381955, 0.30315267411304349991, 
    0.32653871284008329109, 0.34972651120626117171, 0.37270199199091401167, 0.39545120687054255090, 
    0.41796034488678341976, 0.44021574083098732882, 0.46220388354031318383, 0.48391142410030159981, 
    0.50532518394894806449, 0.52643216287735580024, 0.54721954692211115982, 0.56767471614459012604, 
    0.58778525229247312917, 0.60753894633881690674, 0.62692380589410646502, 0.64592806248678731474, 
    0.66454017870785799881, 0.68274885521518545802, 0.70054303759329094276, 0.71791192306444192175, 
    0.73484496704697571042, 0.75133188955687328666, 0.76736268144869692384, 0.78292761049210279238, 
    0.79801722728023950333, 0.81262237096644562842, 0.82673417482576347022, 0.84034407163789270951, 
    0.85344379888831595987, 0.86602540378443864676, 0.87808124808369793257, 0.88960401273070956148, 
    0.90058670230063743104, 0.91102264924608833799, 0.92090551794495362560, 0.93022930854674030375, 
    0.93898836061505654935, 0.94717735656404024854, 0.95479132488664433865, 0.96182564317281907041, 
    0.96827604091575886411, 0.97413860210451009823, 0.97940976760136586865, 0.98408633730260441148, 
    0.98816547208125941376, 0.99164469551074276384, 0.99452189536827333692, 0.99679532491719909006, 
    0.99846360396743397398, 0.99952571971336587467, 0.99998102734872689402, 0.99982925045805268448, 
    0.99907048118449318394, 0.99770518017387287395, 0.99573417629503452187, 0.99315866613663618521, 
    0.98998021328070697071, 0.98620074735340256962, 0.98182256285353685167, 0.97684831775960071162, 
    0.97128103191611384173, 0.96512408520028906958, 0.95838121547012227205, 0.95105651629515357212, 
    0.94315443447127746406, 0.93467976732111061635, 0.92563765978155628805, 0.91603360128033348687, 
    0.90587342240336711573, 0.89516329135506232207, 0.88390971021361200329, 0.87211951098361085643, 
    0.85979985144837241434, 0.84695821082446711044, 0.83360238522111948462, 0.81974048290722111245, 
    0.80538091938883263535, 0.79053241230016332073, 0.77520397611112981828, 0.75940491665470713248, 
    0.74314482547739423501, 0.72643357401622412687, 0.70928130760585346452, 0.69169843931937002219, 
    0.67369564364655721171, 0.65528385001345356058, 0.63647423614714139791, 0.61727822128979295904, 
    0.59770745926609363431, 0.57777383140825110211, 0.55748943934288554512, 0.53686659764418000010, 
    0.51591782635775108467, 0.49465584339977882953, 0.47309355683601007442, 0.45124405704532281416, 
    0.42912060877260896402, 0.40673664307580020775, 0.38410574917192585710, 0.36124166618715294874, 
    0.33815827481581709674, 0.31486958889350786984, 0.29138974688932464021, 0.26773300332246792135, 
    0.24391372010837714866, 0.21994635783966862823, 0.19584546700716696187, 0.17162567916635962551, 
    0.14730169805463751138, 0.12288829066471412227, 0.098400278279642709565, 0.073852527474873960817, 
    0.049259941092816851969, 0.024637449195381972702, 0};
};

template <typename T>
    requires std::is_floating_point_v<T>
struct TestData<T, TestFuncKind::Cos> {
    static constexpr TestInterval<T> interval{-PI<T>, PI<T>};
    static constexpr std::array<T, 256> data = {
    -1.00000000000000000000, -0.999696451977871617066, -0.998785992194289944372, -0.997269173385788049221, 
    -0.995146916407064427376, -0.992420509671935758261, -0.989091608371145973498, -0.985162233467506503765, 
    -0.980634770468977750396, -0.975511967980436639073, -0.969796936035009471820, -0.963493144205983118519, 
    -0.956604419500440799194, -0.949134944035901222439, -0.941089252501371583202, -0.932472229404355804573, 
    -0.923289106105489354018, -0.913545457642600895502, -0.903247199346128877124, -0.892400583247947821468, 
    -0.881012194285784506009, -0.869088946305528317510, -0.856638077863862761977, -0.843667147833766335972, 
    -0.830184030815550642328, -0.816196912356221690872, -0.801714283980066691001, -0.786744938033483247203, 
    -0.771297962347180641340, -0.755382734718993758165, -0.739008917220659115925, -0.722186450332009335794, 
    -0.704925546906147157479, -0.687236685969262719966, -0.669130606358858213826, -0.650618300204242113720, 
    -0.631711006253250957262, -0.612420203049249991062, -0.592757601962554899850, -0.572735140080505215003, 
    -0.552364972960505810763, -0.531659467250436088006, -0.510631193180906965938, -0.489292916933923602814, 
    -0.467657592892586800341, -0.445738355776538267396, -0.423548512667924283127, -0.401101534932718765338, 
    -0.378411050042310276997, -0.355490833300318053012, -0.332354799479659664562, -0.309016994374947424102, 
    -0.285491586275342037792, -0.261792857363040302142, -0.237935195042618788981, -0.213933083206497439906, 
    -0.189801093441825772687, -0.165553876184129964254, -0.141206151823091396120, -0.116772701765856308892, 
    -0.0922683594633019952397, -0.0677080014047074496178, -0.0431065380862955745566, -0.0184789049591299058338, 
    0.00615994663813864738860, 0.0307950585561703538746, 0.0554114749159699538670, 0.0799942511885416354926, 
    0.104528463267653471400, 0.128999216530203276230, 0.153391654878685372649, 0.177690969760268620137, 
    0.201882409157010259941, 0.225951286541747652930, 0.249882989794230823899, 0.273662990072082863539, 
    0.297276850631202663083, 0.320710235590255150038, 0.343948918633928137645, 0.366978791649672075253, 
    0.389785873292679369083, 0.412356317473903508306, 0.434676421765964953607, 0.456732635721840596024, 
    0.478511569101286542579, 0.500000000000000000000, 0.521184882876585074488, 0.542053356472449348348, 
    0.562592751619823095614, 0.582790598933160919070, 0.602634636379256389179, 0.622112816721473898244, 
    0.641213314833578366120, 0.659924534878722600358, 0.678235117349233975990, 0.696133945962926608280, 
    0.713610154411752294620, 0.730653132958693146264, 0.747252534878890962498, 0.763398282741102963065, 
    0.779080574525670431924, 0.794289889575286077789, 0.809016994374947424102, 0.823252948157587241632, 
    0.836989108331977867601, 0.850217135729614152134, 0.862928999667389670121, 0.875116982822992667811, 
    0.886773685920061910528, 0.897892032220258091945, 0.908465271819523686112, 0.918486985745922999892, 
    0.927951089856574643323, 0.936851838531310605594, 0.945183828160819530852, 0.952942000427156555831, 
    0.960121645374628124776, 0.966718404269187459621, 0.972728272244604757758, 0.978147600733805637929, 
    0.982973099683901778282, 0.987201839553569010275, 0.990831253091560268059, 0.993859136895273665188, 
    0.996283652748429498130, 0.998103328737044078160, 0.999317060143022888346, 0.999924110114830568752, 
    0.999924110114830568752, 0.999317060143022888346, 0.998103328737044078160, 0.996283652748429498130, 
    0.993859136895273665188, 0.990831253091560268059, 0.987201839553569010275, 0.982973099683901778282, 
    0.978147600733805637929, 0.972728272244604757758, 0.966718404269187459621, 0.960121645374628124776, 
    0.952942000427156555831, 0.945183828160819530852, 0.936851838531310605594, 0.927951089856574643323, 
    0.918486985745922999892, 0.908465271819523686112, 0.897892032220258091945, 0.886773685920061910528, 
    0.875116982822992667811, 0.862928999667389670121, 0.850217135729614152134, 0.836989108331977867601, 
    0.823252948157587241632, 0.809016994374947424102, 0.794289889575286077789, 0.779080574525670431924, 
    0.763398282741102963065, 0.747252534878890962498, 0.730653132958693146264, 0.713610154411752294620, 
    0.696133945962926608280, 0.678235117349233975990, 0.659924534878722600358, 0.641213314833578366120, 
    0.622112816721473898244, 0.602634636379256389179, 0.582790598933160919070, 0.562592751619823095614, 
    0.542053356472449348348, 0.521184882876585074488, 0.500000000000000000000, 0.478511569101286542579, 
    0.456732635721840596024, 0.434676421765964953607, 0.412356317473903508306, 0.389785873292679369083, 
    0.366978791649672075253, 0.343948918633928137645, 0.320710235590255150038, 0.297276850631202663083, 
    0.273662990072082863539, 0.249882989794230823899, 0.225951286541747652930, 0.201882409157010259941, 
    0.177690969760268620137, 0.153391654878685372649, 0.128999216530203276230, 0.104528463267653471400, 
    0.0799942511885416354926, 0.0554114749159699538670, 0.0307950585561703538746, 0.00615994663813864738860, 
    -0.0184789049591299058338, -0.0431065380862955745566, -0.0677080014047074496178, -0.0922683594633019952397, 
    -0.116772701765856308892, -0.141206151823091396120, -0.165553876184129964254, -0.189801093441825772687, 
    -0.213933083206497439906, -0.237935195042618788981, -0.261792857363040302142, -0.285491586275342037792, 
    -0.309016994374947424102, -0.332354799479659664562, -0.355490833300318053012, -0.378411050042310276997, 
    -0.401101534932718765338, -0.423548512667924283127, -0.445738355776538267396, -0.467657592892586800341, 
    -0.489292916933923602814, -0.510631193180906965938, -0.531659467250436088006, -0.552364972960505810763, 
    -0.572735140080505215003, -0.592757601962554899850, -0.612420203049249991062, -0.631711006253250957262, 
    -0.650618300204242113720, -0.669130606358858213826, -0.687236685969262719966, -0.704925546906147157479, 
    -0.722186450332009335794, -0.739008917220659115925, -0.755382734718993758165, -0.771297962347180641340, 
    -0.786744938033483247203, -0.801714283980066691001, -0.816196912356221690872, -0.830184030815550642328, 
    -0.843667147833766335972, -0.856638077863862761977, -0.869088946305528317510, -0.881012194285784506009, 
    -0.892400583247947821468, -0.903247199346128877124, -0.913545457642600895502, -0.923289106105489354018, 
    -0.932472229404355804573, -0.941089252501371583202, -0.949134944035901222439, -0.956604419500440799194, 
    -0.963493144205983118519, -0.969796936035009471820, -0.975511967980436639073, -0.980634770468977750396, 
    -0.985162233467506503765, -0.989091608371145973498, -0.992420509671935758261, -0.995146916407064427376, 
    -0.997269173385788049221, -0.998785992194289944372, -0.999696451977871617066, -1.00000000000000000000};
};

template <typename T>
    requires std::is_floating_point_v<T>
struct TestData<T, TestFuncKind::ArcCos> {
    static constexpr TestInterval<T> interval{-1, 1};
    static constexpr std::array<T, 256> data = {
        3.14159265358979323846, 3.01626579119246500681, 2.96423732216650262226, 2.92423457416222948351, 
        2.89044339580436200049, 2.86061325008275253158, 2.83359065587860189731, 2.80869080913450610301, 
        2.78546778430787311421, 2.76361201667852441763, 2.74289823818859007115, 2.72315648020090839898, 
        2.70425476184190931438, 2.68608817756811129547, 2.66857171075389237761, 2.65163532733606493012, 
        2.63522052328740364763, 2.61927783178374461594, 2.60376498292220694645, 2.58864551865964636318, 
        2.57388773250164437446, 2.55946384548315788786, 2.54534935711808980405, 2.53152252795742064554, 
        2.51796396254798329010, 2.50465626996851528245, 2.49158378500789959504, 2.47873233725273023169, 
        2.46608905839459859138, 2.45364222030122871597, 2.44138109805550217537, 2.42929585341404404195, 
        2.41737743508472873198, 2.40561749294939646111, 2.39400830392077244067, 2.38254270756187289816, 
        2.37121404994186732461, 2.36001613447642589651, 2.348943178719381823127, 2.337989776248376868720, 
        2.327150862929350771013, 2.316421686960396294632, 2.305797782190105235851, 2.295274944283318502641, 
        2.284849209371474297899, 2.274516834878120095151, 2.264274282254668190018, 2.254118201398760916098, 
        2.244045416558971869119, 2.234052913556048848923, 2.224137828173346046224, 2.214297435588181006034, 
        2.204529140732142955023, 2.194830469482328696821, 2.185199060597464620568, 2.175632658323197009262, 
        2.166129105599753239422, 2.156686337812905908211, 2.147302377035887424276, 2.137975326715752272262, 
        2.128703366762792353672, 2.119484749006082238548, 2.110317792982154294954, 2.101200882027253444737, 
        2.092132459646661404610, 2.083111026137264966279, 2.074135135441918496274, 2.065203392216257090491, 
        2.056314449090487782504, 2.047467004110351211749, 2.038659798342930512885, 2.029891613634309770619, 
        2.021161270507270154345, 2.012467626188274267743, 2.003809572753942646295, 1.995186035388083201564, 
        1.986595970741105657643, 1.978038365384348203546, 1.969512234352471070862, 1.961016619767638895863, 
        1.952550589539727013590, 1.944113236137251964905, 1.935703675424148514509, 1.927321045557898834134, 
        1.918964505944868146864, 1.910633236249018556328, 1.902326435450462108096, 1.894043320950578116514, 
        1.885783127720660902871, 1.877545107491284528966, 1.869328527979772837540, 1.861132672153347884325, 
        1.852956837525699238512, 1.844800335484872049600, 1.836662490650514494932, 1.828542640258656371319, 
        1.820440133572311199611, 1.812354331316305194707, 1.804284605134838646260, 1.796230337070379407189, 
        1.788190919062574975363, 1.780165752465949690827, 1.772154247585227410686, 1.764155823227188167981, 
        1.756169906268030223989, 1.748195931235266997723, 1.740233339903241975647, 1.732281580901394208415, 
        1.724340109334452697690, 1.716408386413780144925, 1.708485879099125429514, 1.700572059750080037015, 
        1.692666405786566678978, 1.684768399357718724864, 1.676877527018536976425, 1.6689932794137359125933, 
        1.6611151509682149603730, 1.6532426395836117328758, 1.6453752463404136354064, 1.6375124752051218787767, 
        1.6296538327419778494437, 1.6217988278287760523375, 1.6139469713763005387809, 1.6060977760509329244051, 
        1.5982507559999898479354, 1.5904054265793560709264, 1.5825613040829864133311, 1.57471790547385539555491, 
        1.56687474811593784290774, 1.5590313495068068251316, 1.5511872270104371675362, 1.5433418975898033905272, 
        1.5354948775388603140576, 1.5276456822134926996817, 1.5197938257610171861251, 1.5119388208478153890189, 
        1.5040801783846713596859, 1.4962174072493796030562, 1.4883500140061815055868, 1.4804775026215782780897, 
        1.4725993741760573258693, 1.464715126571256262037, 1.456824254232074513599, 1.448926247803226559485, 
        1.441020593839713201448, 1.433106774490667808948, 1.425184267176013093538, 1.417252544255340540773, 
        1.409311072688399030048, 1.401359313686551262816, 1.393396722354526240740, 1.385422747321763014473, 
        1.377436830362605070482, 1.369438406004565827776, 1.361426901123843547636, 1.353401734527218263099, 
        1.345362316519413831274, 1.337308048454954592203, 1.329238322273488043755, 1.321152520017482038851, 
        1.313050013331136867144, 1.304930162939278743531, 1.296792318104921188863, 1.288635816064093999950, 
        1.280459981436445354137, 1.272264125610020400923, 1.264047546098508709496, 1.255809525869132335591, 
        1.247549332639215121949, 1.239266218139331130367, 1.230959417340774682135, 1.222628147644925091598, 
        1.214271608031894404329, 1.205888978165644723954, 1.197479417452541273558, 1.189042064050066224873, 
        1.180576033822154342600, 1.172080419237322167601, 1.163554288205445034917, 1.154996682848687580820, 
        1.146406618201710036898, 1.137783080835850592167, 1.129125027401518970720, 1.120431383082523084118, 
        1.111701039955483467843, 1.102932855246862725578, 1.094125649479442026714, 1.085278204499305455959, 
        1.076389261373536147971, 1.067457518147874742188, 1.058481627452528272184, 1.049460193943131833853, 
        1.040391771562539793725, 1.031274860607638943509, 1.022107904583710999914, 1.012889286827000884791, 
        1.003617326874040966201, 0.994290276553905814186, 0.984906315776887330251, 0.975463547990039999040, 
        0.965959995266596229201, 0.956393592992328617894, 0.946762184107464541642, 0.937063512857650283439, 
        0.927295218001612232429, 0.917454825416447192239, 0.907539740033744389540, 0.897547237030821369344, 
        0.887474452191032322365, 0.877318371335125048445, 0.867075818711673143312, 0.856743444218318940563, 
        0.846317709306474735821, 0.835794871399688002611, 0.825170966629396943830, 0.814441790660442467450, 
        0.803602877341416369743, 0.792649474870411415336, 0.78157651911336734195, 0.77037860364792591385, 
        0.75904994602792034031, 0.74758434966902079779, 0.73597516064039677735, 0.72421521850506450648, 
        0.71229680017574919652, 0.70021155553429106309, 0.68795043328856452249, 0.67550359519519464708, 
        0.66286031633706300677, 0.65000886858189364342, 0.63693638362127795601, 0.62362869104180994836, 
        0.61007012563237259293, 0.59624329647170343442, 0.58212880810663535060, 0.56770492108814886400, 
        0.55294713493014687528, 0.53782767066758629201, 0.52231482180604862252, 0.50637213030238959083, 
        0.48995732625372830834, 0.47302094283590086085, 0.45550447602168194299, 0.43733789174788392408, 
        0.41843617338888483948, 0.39869441540120316731, 0.37798063691126882084, 0.35612486928192012426, 
        0.33290184445528713545, 0.30800199771119134115, 0.28097940350704070688, 0.25114925778543123797, 
        0.21735807942756375496, 0.17735533142329061620, 0.12532686239732823165, 0};
};
// clang-format on

template <typename T, TestFuncKind Kind>
    requires std::is_floating_point_v<T>
constexpr std::array<T, 256> const &accurateData = TestData<T, Kind>::data;

template <typename T, TestFuncKind Kind>
    requires std::is_floating_point_v<T>
constexpr TestInterval<T> const &testInterval = TestData<T, Kind>::interval;

template <typename T, TestFuncKind Kind>
struct TestFuncSturct {};

template <typename T>
struct TestFuncSturct<T, TestFuncKind::Sin> {
    constexpr static auto TestFunc = sin<T>;
    constexpr static T (*RefFunc)(T) = std::sin;
};

template <typename T>
struct TestFuncSturct<T, TestFuncKind::Cos> {
    constexpr static auto TestFunc = cos<T>;
    constexpr static T (*RefFunc)(T) = std::cos;
};

template <typename T>
struct TestFuncSturct<T, TestFuncKind::ArcCos> {
    constexpr static auto TestFunc = arccos<T>;
    constexpr static T (*RefFunc)(T) = std::acos;
};

template <typename T, TestFuncKind Kind>
constexpr static auto TestFunc = TestFuncSturct<T, Kind>::TestFunc;

template <typename T, TestFuncKind Kind>
constexpr static auto RefFunc = TestFuncSturct<T, Kind>::RefFunc;

template <typename T, TestFuncKind Kind>
void validateAgainstMathematica() {
    std::size_t laneCount = HWY_MAX_LANES_D(D<T>);

    constexpr T intervalStart = testInterval<T, Kind>.min;
    constexpr T intervalEnd = testInterval<T, Kind>.max;
    std::size_t testDataSize = accurateData<T, Kind>.size();
    T step = (intervalEnd - intervalStart) / T(testDataSize - 1);

    constexpr T Tolerance =
        []() -> std::conditional_t<std::is_same_v<T, double>, double, float> {
        if constexpr (std::is_same_v<T, double>)
            return 1e-11;
        return 1e-6f;
    }();

    for (std::uint32_t i = 0; i < testDataSize; i += laneCount) {
        std::vector<T> testCase(laneCount);
        for (std::uint32_t j = 0; j < laneCount; j++) {
            testCase[j] = intervalStart + (i + j) * step;
        }

        auto startIt = accurateData<T, Kind>.begin() + i;
        std::vector<T> expectedValues(startIt, startIt + laneCount);

        runTestCase<T>(testCase, expectedValues, TestFunc<T, Kind>, Tolerance);
    }
}
TEST(TrigonometricTest, SinVsMathematicaFloat) {
    validateAgainstMathematica<float, TestFuncKind::Sin>();
}
TEST(TrigonometricTest, SinVsMathematicaDouble) {
    validateAgainstMathematica<double, TestFuncKind::Sin>();
}

TEST(TrigonometricTest, CosVsMathematicaFloat) {
    validateAgainstMathematica<float, TestFuncKind::Cos>();
}
TEST(TrigonometricTest, CosVsMathematicaDouble) {
    validateAgainstMathematica<double, TestFuncKind::Cos>();
}

TEST(TrigonometricTest, ArcCosVsMathematicaFloat) {
    validateAgainstMathematica<float, TestFuncKind::ArcCos>();
}

TEST(TrigonometricTest, ArcCosVsMathematicaDouble) {
    validateAgainstMathematica<double, TestFuncKind::ArcCos>();
}

template <typename T, TestFuncKind Kind>
void validateAgainstStd() {

    std::size_t laneCount = HWY_MAX_LANES_D(D<T>);
    constexpr std::uint32_t testPointsCount = 256;

    constexpr T intervalStart = testInterval<T, Kind>.min;
    constexpr T intervalEnd = testInterval<T, Kind>.max;
    T step = (intervalEnd - intervalStart) / T(testPointsCount - 1);

    constexpr T Tolerance =
        []() -> std::conditional_t<std::is_same_v<T, double>, double, float> {
        if constexpr (std::is_same_v<T, double>)
            return 1e-11;
        return 1e-6f;
    }();

    for (std::uint32_t i = 0; i < testPointsCount; i += laneCount) {
        std::vector<T> testCase(laneCount);
        for (std::uint32_t j = 0; j < laneCount; j++) {
            testCase[j] = intervalStart + (i + j) * step;
        }

        std::vector<T> expectedValues = testCase;
        std::transform(expectedValues.begin(),
                       expectedValues.end(),
                       expectedValues.begin(),
                       [](auto const &a) { return RefFunc<T, Kind>(a); });

        runTestCase<T>(testCase, expectedValues, TestFunc<T, Kind>, Tolerance);
    }
}

TEST(TrigonometricTest, Sin) {
    validateAgainstStd<float, TestFuncKind::Sin>();
    validateAgainstStd<double, TestFuncKind::Sin>();
}

TEST(TrigonometricTest, Cos) {
    validateAgainstStd<float, TestFuncKind::Cos>();
    validateAgainstStd<double, TestFuncKind::Cos>();
}

TEST(TrigonometricTest, ArcCos) {
    // validateAgainstStd<float, TestFuncKind::ArcCos>();
    // validateAgainstStd<double, TestFuncKind::ArcCos>();
}

} // namespace trigon::test